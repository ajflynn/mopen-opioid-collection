{
	"variables": [],
	"info": {
		"name": "LOCAL - Transition of Care Objects",
		"_postman_id": "9e89368c-fbf3-aae0-4355-d6f473b6c710",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Get Shelf",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{baseUrl}}/shelf",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "LOCAL - Add Respiratory Depression Calculator",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{baseUrl}}/shelf/ark:/67034/k43k5p",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputMessage\": \"<rdf:RDF xmlns:ot=\\\"http://uofm.org/objectteller/#\\\"\\n xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\">\\n  <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/inputMessage\\\">\\n    <ot:noofparams>1</ot:noofparams>\\n    <ot:params>\\n      <rdf:Seq>\\n        <rdf:li>rxcui</rdf:li>\\n      </rdf:Seq>\\n    </ot:params>\\n  </rdf:Description>\\n  <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/param/\\\">\\n    <ot:datatype>STRING</ot:datatype>\\n  </rdf:Description>\\n</rdf:RDF>\\n\",\n  \"outputMessage\": \"<rdf:RDF xmlns:ot=\\\"http://uofm.org/objectteller/\\\"\\n  xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\">\\n  <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/outputMessage\\\">\\n    <ot:returntype>STRING</ot:returntype>\\n  </rdf:Description>\\n</rdf:RDF>\\n\",\n  \"payload\": {\n    \"content\": \"# Code to screen a medication list expressed in RXNORM RxCUIs for a variety of opioid and non-opioid medications\\n# Objective:  Identify regimens where the risk of harm from respiratory depression is real\\n\\n#import requests\\n#import re\\n\\ndef makeListOfRxCUIs(classID):\\n    temp_grab = requests.get(\\\"https://rxnav.nlm.nih.gov/REST/rxclass/classMembers?classId=\\\"+ str(classID) + \\\"&relaSource=FDASPL&rela=has_EPC\\\")\\n    #print (temp_grab.status_code)\\n    regex = r\\\"<rxcui>(.+?)</rxcui>\\\"\\n    listMade = re.findall(regex,temp_grab.text)\\n    return listMade\\n\\ndef opioidCheck(n,opioidList):   # Check if an RxCUI indiccates an opioid\\n    if n in opioidList:\\n        return True\\n    else:\\n        return False\\n\\ndef benzodiazepineCheck(n,benzodiazepineList): # Check if an RxCUI indicates a benzodiazepine\\n    if n in benzodiazepineList:\\n        return True\\n    else:\\n        return False\\n\\ndef muscleRelaxantCheck(n,muscleRelaxantList): # Check if an RxCUI indicates a muscle relaxant\\n    if n in muscleRelaxantList:\\n        return True\\n    else:\\n        return False\\n\\n# execution sequence begins here\\n\\ndef execute(info):\\n    # breaking input dictionary into list on spaces\\n    rxcuistring = info.get(\\\"rxcui\\\")\\n    rxcuistring\\n    rxcuis=rxcuistring.split()\\n\\n    # default to False\\n    ocheck = False\\n    bcheck = False\\n    mcheck = False\\n\\n    # extracting only the RxCUIs\\n    # calls to utilize API\\n    #opioidList = makeListOfRxCUIs(\\\"N0000175690\\\")\\n    #benzodiazepineList = makeListOfRxCUIs(\\\"N0000175694\\\")\\n    #muscleRelaxantList = makeListOfRxCUIs(\\\"N0000175737\\\")\\n\\n    #hard coded list of drugs within class\\n    opioidList = [\\\"480\\\", \\\"2670\\\", \\\"235412\\\", \\\"23088\\\", \\\"4337\\\", \\\"5489\\\", \\\"221107\\\", \\\"314667\\\", \\\"3423\\\", \\\"6378\\\", \\\"6468\\\", \\\"6754\\\", \\\"6813\\\", \\\"7052\\\", \\\"7804\\\", \\\"7814\\\", \\\"32926\\\", \\\"8785\\\", \\\"73032\\\", \\\"56795\\\", \\\"787390\\\", \\\"10689\\\"]\\n    benzodiazepineList = [\\\"596\\\", \\\"2356\\\", \\\"21241\\\", \\\"2598\\\", \\\"2353\\\", \\\"3322\\\", \\\"4077\\\", \\\"4501\\\", \\\"6470\\\", \\\"6960\\\", \\\"7781\\\", \\\"35185\\\", \\\"10355\\\", \\\"10767\\\"]\\n    muscleRelaxantList = [\\\"2101\\\", \\\"2410\\\", \\\"21949\\\", \\\"59078\\\", \\\"6845\\\", \\\"7715\\\"]\\n\\n\\n    for cui in rxcuis:   # Scan a list of RxCUIs to identify any of three classes\\n        otemp = opioidCheck(cui,opioidList)\\n        if otemp == True:\\n            ocheck = True\\n            continue\\n        btemp = benzodiazepineCheck(cui,benzodiazepineList)\\n        if btemp == True:\\n            bcheck = True\\n            continue\\n        mtemp = muscleRelaxantCheck(cui,muscleRelaxantList)\\n        if mtemp == True:\\n            mcheck = True\\n\\n    outputString = (\\\"Opioid? \\\" + str(ocheck) + \\\" Benzodiazepine? \\\" + str(bcheck) + \\\" Muscle Relaxant? \\\" + str(mcheck))\\n    #print outputString\\n    return outputString\\n\\n\\n# Test function to see if program is working correctly.\\ndef test():\\n    if execute({\\\"rxcui\\\":\\\"480 2101 10767\\\"}) != \\\"Opioid? True Benzodiazepine? True Muscle Relaxant? True\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"rxcui\\\":\\\"830861 2101 10767\\\"}) != \\\"Opioid? False Benzodiazepine? True Muscle Relaxant? True\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"rxcui\\\":\\\"830861 1099870 966443\\\"}) != \\\"Opioid? False Benzodiazepine? False Muscle Relaxant? False\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"rxcui\\\":\\\"480 2101 1099870\\\"}) != \\\"Opioid? True Benzodiazepine? False Muscle Relaxant? True\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"rxcui\\\":\\\"\\\"}) != \\\"Opioid? False Benzodiazepine? False Muscle Relaxant? False\\\":\\n        return \\\"error.\\\"\\n    return \\\"ok.\\\"\\n\",\n    \"engineType\": \"Python\",\n    \"functionName\": \"execute\"\n  },\n  \"url\": \"http://dlhs-fedora-dev-a.umms.med.umich.edu:8080/ObjectTeller/knowledgeObject/ark:/67034/k43k5p\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "LOCAL - Add Medication Regimen Complexity Indicator (MRCI)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{baseUrl}}/shelf/ark:/67034/k4zw2d",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputMessage\": \"<rdf:RDF xmlns:ot=\\\"http://uofm.org/objectteller/#\\\"\\n xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\">\\n  <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/inputMessage\\\">\\n    <ot:noofparams>1</ot:noofparams>\\n    <ot:params>\\n      <rdf:Seq>\\n        <rdf:li>drugList</rdf:li>\\n      </rdf:Seq>\\n    </ot:params>\\n  </rdf:Description>\\n  <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/drugList/\\\">\\n    <ot:datatype>MAP</ot:datatype>\\n  </rdf:Description>\\n</rdf:RDF>\\n\",\n  \"outputMessage\": \"<rdf:RDF xmlns:ot=\\\"http://uofm.org/objectteller/\\\"\\n  xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\">\\n  <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/outputMessage\\\">\\n    <ot:returntype>STRING</ot:returntype>\\n  </rdf:Description>\\n</rdf:RDF>\\n\",\n  \"payload\": {\n    \"content\": \"# This code takes in patient medication information and outputs the medication regimen complexity index (MRCI) score.\\n\\n# Calculates Appendix II. Medication Regimen Complexity Index (MRCI): A\\ndef CalculateDosageForm(drugDict):\\n    total = 0\\n    dosingFormScores = {\\\"oral\\\":{\\\"capsules/tablets\\\":1,\\\"gargles/mouthwashes\\\":2,\\\"gums/lozenges\\\":2,\\\"liquids\\\":2,\\\"powders/granules\\\":2,\\\"sublingual sprays/tabs\\\":2},\\\"topical\\\":{\\\"creams/gels/ointments\\\":2,\\\"dressings\\\":3,\\\"paints/solutions\\\":2,\\\"pastes\\\":3,\\\"patches\\\":2,\\\"sprays\\\":1}, \\\"ear,eye,nose\\\":{\\\"ear drops, ear creams, ear ointments\\\":3,\\\"eye drops\\\":3,\\\"eye gels, eye ointments\\\":3,\\\"nasal drops, nasal cream, nasal ointments\\\":3,\\\"nasal spray\\\":2}, \\\"inhalation\\\":{\\\"accuhalers\\\":3,\\\"aerolizers\\\":3,\\\"metered dose inhalers\\\":4,\\\"nebuliser\\\":5,\\\"oxygen/concentrator\\\":3,\\\"turbuhalers\\\":3,\\\"other DPIs\\\":3}, \\\"others\\\":{\\\"dialysate\\\":5,\\\"enemas\\\":2,\\\"injections prefilled\\\":3,\\\"injections ampoules/vials\\\":4,\\\"pessaries\\\":3,\\\"patient controlled analgesia\\\":2,\\\"suppositories\\\":2,\\\"vaginal cream\\\":2}}\\n    for drug in drugDict.values():\\n        count = 0\\n        route = drug[\\\"route\\\"]\\n        dosageForm = drug[\\\"form\\\"]\\n        if route in dosingFormScores.keys():\\n            # Matches the route and form,\\n            # If the route and form don't match with the dosingFormScores, that prescription is skipped.\\n            for ADosageRoute in dosingFormScores[route]:\\n                count +=1\\n                if dosageForm == ADosageRoute:\\n                    total += dosingFormScores[route][ADosageRoute]\\n                    break\\n                elif dosageForm == \\\"\\\":\\n                    break\\n                elif (count == (len((dosingFormScores[route]).keys()))):\\n                    #print \\\"** INVALID DOSAGE FORM **\\\"\\n                    return \\\"cannot calculate\\\"\\n                else:\\n                    continue\\n        else:\\n            #print \\\"** INVALID ROUTE TYPE **\\\"\\n            return \\\"cannot calculate\\\"\\n    #print \\\"Total = \\\" + str(total)\\n    return total\\n\\n# Calculates Appendix II. Medication Regimen Complexity Index (MRCI): B\\ndef CalculateDosingFrequency(drugDict):\\n    complexityScore = CalculateDosageForm(drugDict)\\n\\n    MedsPerDosingFreq = {\\\"once daily\\\":0, \\\"once daily prn\\\":0, \\\"twice daily\\\":0, \\\"twice daily prn\\\":0, \\\"three times daily\\\":0, \\\"three times daily prn\\\":0, \\\"four times daily\\\":0, \\\"four times daily prn\\\":0, \\\"q 12h\\\":0, \\\"q 12h prn\\\":0, \\\"q 8h\\\":0, \\\"q 8h prm\\\":0, \\\"q 6h\\\":0, \\\"q 6h prn\\\":0, \\\"q 4h\\\":0, \\\"q 4h prn\\\":0, \\\"q 2h\\\":0, \\\"q 2h prn\\\":0, \\\"prn/sos\\\":0, \\\"on alternate days or less frequently\\\":0, \\\"oxygen prn\\\":0, \\\"oxygen<15hrs\\\":0, \\\"oxygen>15 hrs\\\":0}\\n    DosingWeight = {\\\"once daily\\\":1, \\\"once daily prn\\\":0.5, \\\"twice daily\\\":2, \\\"twice daily prn\\\":1, \\\"three times daily\\\":3, \\\"three times daily prn\\\":1.5, \\\"four times daily\\\":4,\\\"four times daily prn\\\":2,\\\"q 12h\\\":2.5,\\\"q 12h prn\\\":1.5,\\\"q 8h\\\":3.5,\\\"q 8h prm\\\":2,\\\"q 6h\\\":4.5,\\\"q 6h prn\\\":2.5,\\\"q 4h\\\":6.5,\\\"q 4h prn\\\":3.5,\\\"q 2h\\\":12.5,\\\"q 2h prn\\\":6.5,\\\"prn/sos\\\":0.5,\\\"on alternate days or less frequently\\\": 2, \\\"oxygen prn\\\":1, \\\"oxygen<15hrs\\\":2, \\\"oxygen>15 hrs\\\":3}\\n\\n    # tallying # of drugs per dosingFrequency\\n    MedsPerDosingFreq = TallyDrugs(drugDict,\\\"dosingFrequency\\\",MedsPerDosingFreq)\\n    if MedsPerDosingFreq == \\\"cannot calculate\\\":\\n        return MedsPerDosingFreq\\n\\n    # Taking # of drugs per dosingFrequency and multiplying by weight\\n    total = WeightDrugs(DosingWeight,MedsPerDosingFreq)\\n\\n    # Add dosing frequence total to complexity score\\n    return total\\n\\n# Calculates Appendix II. Medication Regimen Complexity Index (MRCI): C\\ndef CalculateAddDirect(drugDict):\\n\\n    MedsPerAddDirect = {\\\"break or crush tablet\\\":0,\\\"dissolve tablet/powder\\\":0,\\\"multiple units at one time\\\":0,\\\"variable dose\\\":0,\\\"take/use at specficied time/s\\\":0,\\\"relation to food\\\":0,\\\"take with specific fluid\\\":0,\\\"take/use as directed\\\":0,\\\"tapering/increasing dose\\\":0,\\\"alternating dose\\\":0}\\n    AddDirectWeight= {\\\"break or crush tablet\\\":1,\\\"dissolve tablet/powder\\\":1,\\\"multiple units at one time\\\":1,\\\"variable dose\\\":1,\\\"take/use at specified time/s\\\":1,\\\"relation to food\\\":1,\\\"take with specific fluid\\\":1,\\\"take/use as directed\\\":2,\\\"tapering/increasing dose\\\":2,\\\"alternating dose\\\":2}\\n\\n    # Tallying # of drugs per addional direction\\n    MedsPerAddDirect = TallyDrugs(drugDict,\\\"additionalDirections\\\",MedsPerAddDirect)\\n    if MedsPerAddDirect== \\\"cannot calculate\\\":\\n        return MedsPerAddDirect\\n\\n    # Taking # of drugs per additional direction and multiplying by weight\\n    total = WeightDrugs(AddDirectWeight,MedsPerAddDirect)\\n\\n    #print \\\"Complextiy Score = \\\" + str(complexityScore)\\n    return total\\n\\n\\ndef TallyDrugs(drugDict,attribute,tallyDict):\\n    for drug in drugDict.values():\\n        attributeValue = drug[attribute]\\n        count = 0\\n        for attributeOptions in tallyDict:\\n            count += 1\\n            if attributeOptions == attributeValue:\\n                tallyDict[attributeOptions] += 1\\n                break\\n            elif attributeValue == \\\"\\\":\\n                break\\n            elif (count == len(tallyDict.keys())):\\n                #print \\\"** INVALID \\\" + str(attribute.upper()) + \\\" TYPE **\\\"\\n                return \\\"cannot calculate\\\"\\n            else:\\n                continue\\n    return tallyDict\\n\\ndef WeightDrugs(weightDict,tallyDict):\\n    total = 0\\n    for A in tallyDict:\\n        if tallyDict[A] != 0:\\n            for B in weightDict:\\n                if A == B:\\n                    multi = ((tallyDict[A])*(weightDict[B]))\\n                    total += multi\\n                else:\\n                    continue\\n        else:\\n            continue\\n    return total\\n\\n\\n# Use the test function to see if script is properly working.\\ndef test():\\n    if execute({\\\"drugList\\\":{\\\"lisinopril 40 mg tablet\\\":{\\\"route\\\":\\\"oral\\\",\\\"form\\\":\\\"capsules/tablets\\\",\\\"dosingFrequency\\\":\\\"twice daily\\\",\\\"additionalDirections\\\":\\\"\\\"},\\\"metroprolol tartrate 100 mg tablet\\\":{\\\"route\\\":\\\"oral\\\",\\\"form\\\":\\\"capsules/tablets\\\", \\\"dosingFrequency\\\":\\\"twice daily\\\",\\\"additionalDirections\\\":\\\"break or crush tablet\\\"},\\\"amLODIPine 10 mg tablet\\\":{\\\"route\\\":\\\"oral\\\",\\\"form\\\":\\\"capsules/tablets\\\",\\\"dosingFrequency\\\":\\\"once daily\\\",\\\"additionalDirections\\\":\\\"\\\"},\\\"levothyroxine 75 mcg capsule\\\":{\\\"route\\\":\\\"oral\\\",\\\"form\\\":\\\"capsules/tablets\\\",\\\"dosingFrequency\\\":\\\"once daily\\\",\\\"additionalDirections\\\":\\\"alternating dose\\\"}}}) != \\\"MRCI Score = 13\\\":\\n        return \\\"error.\\\"\\n\\n    if execute({\\\"drugList\\\":{\\\"colchicine 0.l6mg tablet\\\":{\\\"route\\\":\\\"oral\\\",\\\"form\\\":\\\"capsules/tablets\\\",\\\"dosingFrequency\\\":\\\"twice daily\\\",\\\"additionalDirections\\\":\\\"\\\"},\\\"ferrous sulfate 324 mg\\\":{\\\"route\\\":\\\"oral\\\",\\\"form\\\":\\\"capsules/tablets\\\",\\\"dosingFrequency\\\":\\\"on alternate days or less frequently\\\",\\\"additionalDirections\\\":\\\"relation to food\\\"}}}) != \\\"MRCI Score = 7\\\":\\n        return \\\"error.\\\"\\n\\n    if execute({\\\"drugList\\\":{\\\"Erythropoietin\\\":{\\\"route\\\":\\\"others\\\",\\\"form\\\":\\\"dialysate\\\",\\\"dosingFrequency\\\":\\\"q 12h\\\",\\\"additionalDirections\\\":\\\"\\\"},\\\"atenolol 25 mg tablet\\\":{\\\"route\\\":\\\"oral\\\",\\\"form\\\":\\\"capsules/tablets\\\",\\\"dosingFrequency\\\":\\\"on alternate days or less frequently\\\",\\\"additionalDirections\\\":\\\"take with specific fluid\\\"}}}) != \\\"MRCI Score = 11.5\\\":\\n        return \\\"error.\\\"\\n\\n    if execute({\\\"drugList\\\":{\\\"Erythropoietin\\\":{\\\"route\\\":\\\"ear,eye,nose\\\",\\\"form\\\":\\\"eye gels, eye ointments\\\",\\\"dosingFrequency\\\":\\\"not specficied\\\",\\\"additionalDirections\\\":\\\"\\\"},\\\"sitaGLIPtin 50 mg-metformin 1,000 mg tablet\\\":{\\\"route\\\":\\\"oral\\\",\\\"form\\\":\\\"capsules/tablets\\\",\\\"dosingFrequency\\\":\\\"on alternate days or less frequently\\\",\\\"additionalDirections\\\":\\\"take with specific fluid\\\"}}}) != \\\"cannot calculate\\\":\\n        return \\\"error.\\\"\\n\\n    if execute({\\\"drugList\\\":{\\\"Erythropoietin\\\":{\\\"route\\\":\\\"inhalation\\\",\\\"form\\\":\\\"chewable\\\",\\\"dosingFrequency\\\":\\\"\\\",\\\"additionalDirections\\\":\\\"\\\"}}}) !=  \\\"cannot calculate\\\":\\n        return \\\"error.\\\"\\n\\n    if execute({\\\"drugList\\\":{\\\"Advil AM\\\":{\\\"route\\\":\\\"oral or nasal\\\",\\\"form\\\":\\\"\\\",\\\"dosingFrequency\\\":\\\"\\\",\\\"additionalDirections\\\":\\\"\\\"},\\\"Advil PM\\\":{\\\"route\\\":\\\"oral\\\",\\\"form\\\":\\\"\\\",\\\"dosingFrequency\\\":\\\"\\\",\\\"additionalDirections\\\":\\\"\\\"}}}) != \\\"cannot calculate\\\":\\n        return \\\"error.\\\"\\n    return \\\"ok.\\\"\\n\\n\\ndef execute(drugList):\\n    drugDict = drugList[\\\"drugList\\\"]\\n\\n    total1 = CalculateDosageForm(drugDict)\\n    if total1 == \\\"cannot calculate\\\":\\n        return total1\\n    total2 = CalculateDosingFrequency(drugDict)\\n    if total2 == \\\"cannot calculate\\\":\\n        return total2\\n    total3 = CalculateAddDirect(drugDict)\\n    if total3 == \\\"cannot calculate\\\":\\n        return total3\\n    complexityScore = total1 + total2 + total3\\n    output = \\\"MRCI Score = \\\" + str(complexityScore)\\n    json_output = {\\\"MRCI Score\\\":complexityScore}\\n    return output\\n\",\n    \"engineType\": \"Python\",\n    \"functionName\": \"execute\"\n  },\n  \"url\": \"http://dlhs-fedora-dev-a.umms.med.umich.edu:8080/ObjectTeller/knowledgeObject/ark:/67034/k4zw2d\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "LOCAL - Add Morphine Milligram Equivalents (MME) Calculator",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{baseUrl}}/shelf/ark:/99999/fk4c25559n",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputMessage\": \"<rdf:RDF xmlns:ot=\\\"http://uofm.org/objectteller/#\\\"\\n         xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\">\\n    <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/inputMessage\\\">\\n        <ot:noofparams>1</ot:noofparams>\\n        <ot:params>\\n            <rdf:Seq>\\n                <rdf:li>opiodPrescriptions</rdf:li>\\n            </rdf:Seq>\\n        </ot:params>\\n    </rdf:Description>\\n    <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/opiodPrescriptions/\\\">\\n        <ot:datatype>MAP</ot:datatype>\\n    </rdf:Description>\\n\\n</rdf:RDF>\\n\",\n  \"outputMessage\": \"<rdf:RDF xmlns:ot=\\\"http://uofm.org/objectteller/\\\"\\n  xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\">\\n  <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/outputMessage\\\">\\n    <ot:returntype>STRING</ot:returntype>\\n  </rdf:Description>\\n</rdf:RDF>\\n\",\n  \"payload\": {\n    \"content\": \"'''\\nPer-day Morphine Milligram Equivalents (equianalgesia) for non-morphine opioid prescriptions\\nDecember 14th, 2016\\nBasic Steps:\\n    1. Determine the total daily amount of each opioid\\n    2. Convert to MMEs\\n    3. Total\\n\\nIf there are missing keys (opiodPrescriptions, dosage, dosingFrequency), missing values (dosage, dosingFrequency), or non-matching values (dosingConversion, conversionFactors), the MME cannot be calculated.\\n** Dosage must be in mg. **\\n'''\\n\\n\\n# determine the total daily amount of each opiod\\ndef totalDailyAmount(dosingFrequency,dosage):\\n    dailyDosage = 0\\n\\n    dosingConversion = {\\\"once daily\\\":1,\\n                        \\\"twice daily\\\":2,\\n                        \\\"three times daily\\\":3,\\n                        \\\"four times daily\\\":4,\\n                        \\\"five times daily\\\":5,\\n                        \\\"six times daily\\\":6,\\n                        \\\"seven times daily\\\":7,\\n                        \\\"eight times daily\\\":8,\\n                        \\\"twelve times daily\\\":12,\\n                        \\\"q 24h\\\":1,\\n                        \\\"q 12h\\\":2,\\n                        \\\"q 8h\\\":3,\\n                        \\\"q 7h\\\":3.428,\\n                        \\\"q 6h\\\":4,\\n                        \\\"q 5h\\\":4.8,\\n                        \\\"q 4h\\\":6,\\n                        \\\"q 2h\\\":12}\\n    try:\\n        temp = dosingConversion[dosingFrequency]\\n    except:\\n        return \\\"No matching dosingFrequency, cannot be calculated.\\\"\\n    for frequencyOptions in dosingConversion.keys():\\n        if dosingFrequency == frequencyOptions:\\n            dailyDosage += (dosage * dosingConversion[dosingFrequency])\\n        else:\\n            continue\\n    return dailyDosage\\n    # return drug name and daily amount in mg/day\\n\\n\\n# convert to MME. Conversions based off CDC approved calculation method: https://www.cdc.gov/drugoverdose/pdf/calculating_total_daily_dose-a.pdf\\ndef MMEConversion(opiodType,dailyDosage):\\n    tempTotal = 0\\n    conversion = 0\\n\\n    conversionFactors = {\\\"codeine\\\":0.15,\\n                        \\\"fentanyl transdermal\\\": 2.4,\\n                        \\\"hydrocodone\\\":1,\\n                        \\\"hydromorphone\\\":4,\\n                        \\\"methadone\\\":\\n                            {\\\"1-20 mg/day\\\":4,\\n                            \\\"21-40 mg/day\\\":8,\\n                            \\\"41-60 mg/day\\\":10,\\n                            \\\"61+ mg/day\\\":12},\\n                        \\\"morphine\\\":1,\\n                        \\\"oxycodone\\\":1.5,\\n                        \\\"oxymorphone\\\":3\\n                        }\\n    try:\\n        temp = conversionFactors[opiodType]\\n    except:\\n        return \\\"No matching opiod type, cannot be calculated.\\\"\\n\\n    if opiodType == \\\"methadone\\\":\\n        if dailyDosage >=1 and dailyDosage <= 20:\\n            conversion = conversionFactors[\\\"methadone\\\"][\\\"1-20 mg/day\\\"]\\n        elif dailyDosage >=21 and dailyDosage <=40:\\n            conversion = conversionFactors[\\\"methadone\\\"][\\\"21-40 mg/day\\\"]\\n        elif dailyDosage >=41 and dailyDosage <=60:\\n            conversion = conversionFactors[\\\"methadone\\\"][\\\"41-60 mg/day\\\"]\\n        elif dailyDosage >=60:\\n            conversion = conversionFactors[\\\"methadone\\\"][\\\"61+ mg/day\\\"]\\n\\n        tempTotal += (conversion * dailyDosage)\\n\\n    else:\\n        for key in conversionFactors.keys():\\n            if key == opiodType:\\n                conversion = conversionFactors[key]\\n                tempTotal += (conversion * dailyDosage)\\n                #conversion = dailyDosage * (conversionFactors[key])\\n                #total += conversion\\n            else:\\n                continue\\n\\n    return tempTotal\\n\\n\\n# add them together\\ndef execute(opiodPrescriptions):\\n    total = 0\\n    try:\\n        prescriptions = opiodPrescriptions[\\\"opiodPrescriptions\\\"]\\n        for opiodType in prescriptions.keys():\\n            dosingFrequency = prescriptions[opiodType][\\\"dosingFrequency\\\"]\\n            dosage = prescriptions[opiodType][\\\"dosage\\\"]\\n            if dosage == 0:\\n                return \\\"No dosage information, cannot be calculated.\\\"\\n\\n            if type(dosage) != float:\\n                return \\\"Dosage information must be of type float.\\\"\\n\\n            if dosingFrequency == \\\"\\\":\\n                return \\\"No dosingFrequency information, cannot be calculated.\\\"\\n\\n            if (type(dosingFrequency) == int) or (type(dosingFrequency) == float):\\n                return \\\"dosingFrequency information must be of type string.\\\"\\n\\n            dailyDosage = totalDailyAmount(dosingFrequency,dosage)\\n            if dailyDosage == \\\"No matching dosageFrequency, cannot be calculated.\\\":\\n                return dailyDosage\\n\\n            tempTotal = MMEConversion(opiodType,dailyDosage)\\n            if tempTotal == \\\"No matching opiod type, cannot be calculated.\\\":\\n                return tempTotal\\n\\n            total += tempTotal\\n    except:\\n        return \\\"Errors found, cannot be calculated.\\\"\\n    return \\\"Morphine Milligram Equivalents total = \\\" + str(total)\\n\\n\\n\\n# Test function to ensure that everything is working correctly.\\n# If everything is correct, the function will return \\\"ok.\\\", else \\\"error.\\\" will be returned.\\ndef test():\\n    if execute({\\\"opiodPrescriptions\\\":{\\\"hydromorphone\\\":{\\\"dosage\\\":1.0,\\\"dosingFrequency\\\":\\\"q 12h\\\"}}}) != \\\"Morphine Milligram Equivalents total = 8.0\\\":\\n        return \\\"error.\\\"\\n\\n    if execute({\\\"opiodPrescr\\\":{\\\"hydromorphone\\\":{\\\"dosage\\\":1.0,\\\"dosingFrequency\\\":\\\"q 12h\\\"}}}) != \\\"Errors found, cannot be calculated.\\\":\\n        return \\\"error.\\\"\\n\\n    if execute({\\\"opiodPrescriptions\\\":{\\\"hydr\\\":{\\\"dosage\\\":1.0,\\\"dosingFrequency\\\":\\\"q 12h\\\"}}}) != \\\"No matching opiod type, cannot be calculated.\\\":\\n        return \\\"error.\\\"\\n\\n    if execute({\\\"opiodPrescriptions\\\":{\\\"methadone\\\":{\\\"dosage\\\":25.0,\\\"dosingFrequency\\\":\\\"once daily\\\"}}}) != \\\"Morphine Milligram Equivalents total = 200.0\\\":\\n        return \\\"error.\\\"\\n\\n    if execute({\\\"opiodPrescriptions\\\":{\\\"methadone\\\":{\\\"dos\\\":25.0,\\\"dosingFrequency\\\":\\\"once daily\\\"}}}) != \\\"Errors found, cannot be calculated.\\\":\\n        return \\\"error.\\\"\\n\\n    if execute({\\\"opiodPrescriptions\\\":{\\\"methadone\\\":{\\\"dosage\\\":25.0,\\\"freq\\\":\\\"once daily\\\"}}}) != \\\"Errors found, cannot be calculated.\\\":\\n        return \\\"error.\\\"\\n\\n    if execute({\\\"opiodPrescriptions\\\":{\\\"methadone\\\":{\\\"dosage\\\":0.0,\\\"dosingFrequency\\\":\\\"once daily\\\"}}}) != \\\"No dosage information, cannot be calculated.\\\":\\n        return \\\"error.\\\"\\n\\n    if execute({\\\"opiodPrescriptions\\\":{\\\"methadone\\\":{\\\"dosage\\\":1.0,\\\"dosingFrequency\\\":\\\"once\\\"}}}) != \\\"Errors found, cannot be calculated.\\\":\\n        return \\\"error.\\\"\\n    return \\\"ok.\\\"\\n\",\n    \"engineType\": \"Python\",\n    \"functionName\": \"execute\"\n  },\n  \"url\": \"http://dlhs-fedora-dev-a.umms.med.umich.edu:8080/ObjectTeller/knowledgeObject/ark:/99999/fk4c25559n\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "LOCAL - Add New Opioid Start Detector",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{baseUrl}}/shelf/ark:/99999/fk43b69v25",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputMessage\": \"<rdf:RDF xmlns:ot=\\\"http://uofm.org/objectteller/#\\\"\\n         xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\">\\n    <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/inputMessage\\\">\\n        <ot:noofparams>2</ot:noofparams>\\n        <ot:params>\\n            <rdf:Seq>\\n                <rdf:li>visitA</rdf:li>\\n                <rdf:li>visitB</rdf:li>\\n            </rdf:Seq>\\n        </ot:params>\\n    </rdf:Description>\\n    <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/age/\\\">\\n        <ot:datatype>MAP</ot:datatype>\\n    </rdf:Description>\\n    <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/gender/\\\">\\n        <ot:datatype>MAP</ot:datatype>\\n    </rdf:Description>\\n</rdf:RDF>\\n\",\n  \"outputMessage\": \"<rdf:RDF xmlns:ot=\\\"http://uofm.org/objectteller/\\\"\\n  xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\">\\n  <rdf:Description rdf:about=\\\"http://uofm.org/objectteller/outputMessage\\\">\\n    <ot:returntype>STRING</ot:returntype>\\n  </rdf:Description>\\n</rdf:RDF>\\n\",\n  \"payload\": {\n    \"content\": \"# New Opioid Start Detector\\n# February 10, 2017\\n# takes in two visit summaries (e.g. admit and discharge summary), and identifies if the patient is a new opioid starter\\nfrom datetime import datetime\\n\\ndef execute(inputs):\\n    visit_A = inputs[\\\"visitA\\\"]\\n    visit_B = inputs[\\\"visitB\\\"]\\n\\n\\n    opioidCheck = {}\\n    # get rx from visit a, and check if it is an opioid\\n    rxcui = visit_A[\\\"rxcui\\\"]\\n    if rxcui == \\\"\\\":\\n        return \\\"rxcui not provided\\\"\\n    opioidCheck[\\\"visit_A\\\"] = opioidDetector(rxcui)\\n\\n    # get rx from visit b, and check if it is an opioid. If it is in opioid, opioid detector returns 1\\n    rxcui = visit_B[\\\"rxcui\\\"]\\n    if rxcui == \\\"\\\":\\n        return \\\"rxCUI not provided\\\"\\n    opioidCheck[\\\"visit_B\\\"] = opioidDetector(rxcui)\\n\\n    # compare dates a and dates b to see which visit was first\\n    date1 = visit_A[\\\"date\\\"]\\n    date2 = visit_B[\\\"date\\\"]\\n    if date1 == \\\"\\\" or date2 == \\\"\\\":\\n        return \\\"date information not provided\\\"\\n\\n\\n    minDate = dateComparison(date1,date2)\\n\\n    # compare dates and opioid rx results, and return if the patient is a new opioid starter or not\\n    return visitComparison(minDate,opioidCheck)\\n\\n\\n\\n\\n# checks if the rx is an opioid, if yes: return 1, if no: return 0\\ndef opioidDetector(rxcui):\\n    # hard coded\\n    opioidList=[\\\"480\\\",\\\"2670\\\",\\\"235412\\\",\\\"23088\\\",\\\"4337\\\",\\\"5489\\\",\\\"221107\\\",\\\"314667\\\",\\\"3423\\\",\\\"6378\\\",\\\"6468\\\",\\\"6754\\\",\\\"6813\\\",\\\"7052\\\",\\\"7804\\\",\\\"7814\\\",\\\"32926\\\",\\\"8785\\\",\\\"73032\\\",\\\"56795\\\",\\\"787390\\\",\\\"10689\\\"]\\n    if rxcui in opioidList:\\n        return 1\\n    else:\\n        return 0\\n\\n\\n\\n\\n\\n# compares the dates of the visits and returns the date that happened first\\ndef dateComparison(date1,date2):\\n    #  year, month, day\\n\\n    date1_split = date1.split(\\\"/\\\")\\n    date1_datetime = datetime((int(date1_split[0])),(int(date1_split[1])),(int(date1_split[2])))\\n\\n    date2_split= date2.split(\\\"/\\\")\\n    date2_datetime = datetime((int(date2_split[0])),(int(date2_split[1])),(int(date2_split[2])))\\n\\n    dates = [date1_datetime,date2_datetime]\\n    minDate = min(dates)\\n    if minDate == date1_datetime:\\n        return \\\"visit_A\\\"\\n    if minDate == date2_datetime:\\n        return \\\"visit_B\\\"\\n\\n\\n\\n\\n# if the last visit rx was an opiod, and the first visit rx was not, this patient is a new opiod starter\\ndef visitComparison(minDate,opioidCheck):\\n    if minDate == \\\"visit_A\\\":\\n        if (opioidCheck[minDate] == 0) and (opioidCheck[\\\"visit_B\\\"] == 1):\\n            return \\\"new opioid starter\\\"\\n        elif (opioidCheck[minDate] == 1):\\n            return \\\"previously prescribed opioid\\\"\\n\\n    if minDate == \\\"visit_B\\\":\\n        if (opioidCheck[minDate] == 0) and (opioidCheck[\\\"visit_A\\\"] == 1):\\n            return \\\"new opioid starter\\\"\\n        elif (opioidCheck[minDate] == 1):\\n            return \\\"previously prescribed opioid\\\"\\n\\n    if (opioidCheck[\\\"visit_B\\\"] == 0) and (opioidCheck[\\\"visit_A\\\"] == 0):\\n        return \\\"not prescribed an opioid\\\"\\n\\n    return \\\"cannot calculate\\\"\\n\\n\\n\\ndef test():\\n    if execute({\\\"visitA\\\":{\\\"date\\\":\\\"2013/4/20\\\",\\\"rxcui\\\":\\\"2670\\\"},\\\"visitB\\\":{\\\"date\\\":\\\"2013/3/31\\\",\\\"rxcui\\\":\\\"10\\\"}}) != \\\"new opioid starter\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"visitA\\\":{\\\"date\\\":\\\"2013/4/20\\\",\\\"rxcui\\\":\\\"70\\\"},\\\"visitB\\\":{\\\"date\\\":\\\"2013/3/31\\\",\\\"rxcui\\\":\\\"10\\\"}}) != \\\"not prescribed an opioid\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"visitA\\\":{\\\"date\\\":\\\"2013/4/20\\\",\\\"rxcui\\\":\\\"70\\\"},\\\"visitB\\\":{\\\"date\\\":\\\"2013/3/31\\\",\\\"rxcui\\\":\\\"2670\\\"}}) != \\\"previously prescribed opioid\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"visitA\\\":{\\\"date\\\":\\\"\\\",\\\"rxcui\\\":\\\"70\\\"},\\\"visitB\\\":{\\\"date\\\":\\\"\\\",\\\"rxcui\\\":\\\"2670\\\"}}) != \\\"date information not provided\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"visitA\\\":{\\\"date\\\":\\\"2013/4/20\\\",\\\"rxcui\\\":\\\"70\\\"},\\\"visitB\\\":{\\\"date\\\":\\\"2013/3/31\\\",\\\"rxcui\\\":\\\"\\\"}}) != \\\"rxCUI not provided\\\":\\n        return \\\"error.\\\"\\n    return \\\"ok.\\\"\\n\",\n    \"engineType\": \"Python\",\n    \"functionName\": \"execute\"\n  },\n  \"url\": \"http://dlhs-fedora-dev-a.umms.med.umich.edu:8080/ObjectTeller/knowledgeObject/ark:/99999/fk43b69v25\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "LOCAL - Add Opioid User Detector",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{baseUrl}}/shelf/ark:/99999/fk4vx0mr08",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputMessage\": \"<rdf:RDF xmlns:ot='http://uofm.org/objectteller/'\\n xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>\\n\\t<rdf:Description rdf:about='http://uofm.org/objectteller/inputMessage'>\\n\\t\\t<ot:noofparams>1</ot:noofparams>\\n\\t\\t<ot:params>\\n\\t\\t\\t<rdf:Seq>\\n\\t\\t\\t\\t\\t<rdf:li>rxcui</rdf:li>\\n\\t\\t\\t</rdf:Seq>\\n\\t\\t</ot:params>\\n\\t</rdf:Description>\\n\\t<rdf:Description rdf:about='http://uofm.org/objectteller/rxcui/'>\\n\\t\\t<ot:datatype>MAP</ot:datatype>\\n\\t</rdf:Description>\\n</rdf:RDF>\",\n  \"outputMessage\": \"<rdf:RDF xmlns:ot='http://uofm.org/objectteller/'\\n xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>\\n\\t<rdf:Description rdf:about='http://uofm.org/objectteller/outputMessage'>\\n\\t\\t<ot:returntype>STRING</ot:returntype>\\n\\t</rdf:Description>\\n</rdf:RDF>\",\n  \"payload\": {\n    \"content\": \"# Opioid User Detector\\n# March 6, 2017\\n\\n# takes in list of prescription rxnorm rxcui SBD & SCD product codes and outputs if the patient is prescribed an Opioid\\ndef execute(inputs): # inputs = {\\\"rxcui\\\":\\\"\\\"}\\n    # SCD & SBD rxnorm rxcui products codes that contain an opioid\\n    opioidList = ['1723218', '1723220', '1723221', '1723222', '1723206', '1723208', '1723209', '1723210', '106500', '1043650', '1086926', '1113050', '1113053', '1114002', '1114030', '1113437', '993837', '993892', '993926', '994228', '994277', '995936', '995940', '995956', '995993', '996216', '996263', '996450', '996481', '996484', '996650', '996730', '1433802', '994045', '994048', '994051', '1368072', '1089057', '1089060', '1089063', '1089072', '994291', '994404', '994835', '995213', '995216', '995440', '995443', '995455', '995478', '996253', '996623', '996629', '996648', '996708', '996712', '996716', '996720', '996724', '996727', '996738', '1308440', '1356799', '1356802', '1356806', '1356809', '1244921', '1088953', '1088965', '1088970', '1088977', '1089023', '1089027', '1089030', '993767', '994239', '995043', '995064', '995067', '995070', '995073', '995077', '995081', '995084', '995088', '995095', '995110', '995118', '995122', '995125', '995132', '995872', '995985', '996277', '996584', '1547607', '1595214', '1652093', '1661325', '1115764', '1145972', '1147709', '1190587', '1242558', '1113998', '1114003', '1114026', '1114110', '1114878', '199400', '1042693', '1113048', '1113051', '1113417', '991486', '994833', '995483', '995868', '995983', '996512', '996580', '996621', '996627', '996636', '996640', '996757', '997008', '997175', '997272', '997398', '998369', '1308438', '1357402', '1541630', '1661319', '1792707', '1294356', '1088951', '1088963', '1088968', '1088975', '1089021', '1089025', '1089028', '1089055', '1089058', '1089061', '1089070', '1099711', '993755', '993763', '993770', '993781', '993890', '993924', '993943', '994043', '994046', '994049', '994059', '994226', '994237', '994289', '994402', '995041', '995062', '995065', '995068', '995071', '995075', '995079', '995082', '995086', '995093', '995108', '995116', '995120', '995123', '995128', '995197', '995211', '995214', '995226', '995438', '995441', '995447', '995450', '995453', '995476', '996706', '996710', '996714', '996718', '996722', '996725', '996728', '996734', '996736', '996976', '996978', '996979', '996981', '996982', '996983', '996988', '996991', '996994', '996998', '997014', '997019', '997160', '997164', '997165', '997169', '997170', '997280', '997284', '997285', '997287', '997289', '997296', '997301', '997303', '1297649', '1356797', '1356800', '1356804', '1356807', '1424295', '1424297', '1431286', '1440003', '1536457', '1536459', '1652087', '1664543', '1115760', '1235862', '1190580', '1652093', '1652087', '1234976', '1190201', '1234886', '1234957', '1234990', '1234994', '1236115', '1812164', '1596108', '1234871', '1234872', '1234884', '1234941', '1234978', '1234999', '1235009', '1235011', '1236113', '1236179', '1236181', '1236182', '1236184', '1236186', '1236188', '1236190', '1236239', '1053651', '1053654', '1053657', '1053660', '1053663', '1053666', '261184', '261185', '261186', '262071', '583490', '261106', '261107', '261108', '261109', '261110', '262219', '668622', '668624', '668626', '668628', '668630', '1735057', '1735060', '1735062', '1735065', '1487616', '1666837', '1729322', '1115575', '1115579', '1237055', '1237059', '1237062', '1237066', '1237070', '1233587', '1233589', '1233606', '1053647', '1053652', '1053655', '1053658', '1053661', '1053664', '197696', '198402', '198403', '245134', '245135', '245136', '310293', '310294', '310295', '310296', '310297', '313992', '313993', '668363', '668364', '668365', '668366', '668367', '706898', '727759', '858087', '858092', '858095', '858098', '858101', '1735003', '1735006', '1735007', '1735008', '1735013', '1233590', '577057', '1233685', '1233686', '1233687', '1487611', '1603495', '1603498', '1603501', '1666831', '1729320', '1115573', '1115577', '1237050', '1237057', '1237060', '1237064', '1237068', '1112224', '1114338', '856907', '857105', '857109', '857113', '857117', '857120', '992675', '1310202', '1310212', '1310270', '1442445', '1495472', '1495474', '1495476', '856917', '857001', '857004', '857007', '857130', '857136', '857370', '858838', '858840', '858937', '858976', '859005', '859164', '860446', '992733', '1366875', '1248039', '1248044', '1248046', '1087463', '856894', '856942', '856984', '856991', '856996', '857385', '857387', '857575', '857718', '857830', '857845', '858772', '858784', '858878', '858900', '858945', '858969', '859019', '859029', '859099', '859141', '859143', '859150', '859158', '859222', '859329', '859331', '859368', '859376', '859941', '859943', '860138', '860159', '860239', '891172', '1297584', '1366879', '1492671', '1492673', '1492675', '1535981', '1147395', '1087389', '1087427', '856946', '860530', '1357942', '1860492', '1860494', '1860496', '1860498', '1860500', '1860502', '858780', '859317', '1372873', '1542981', '1542988', '1595736', '1595742', '1595748', '1595754', '1595760', '1595766', '1595772', '1598284', '1650982', '1651564', '1789753', '1595752', '1595758', '1595764', '1595770', '833036', '856992', '857005', '857083', '857118', '857134', '858798', '860599', '1860491', '1860493', '1860495', '1860497', '1860499', '1860501', '1044427', '1098906', '1112220', '1114334', '856892', '856903', '856908', '856915', '856940', '856944', '856962', '856980', '856987', '856999', '857002', '857076', '857099', '857107', '857111', '857121', '857125', '857128', '857131', '857383', '857391', '857501', '857510', '857556', '857716', '857734', '857839', '857851', '858770', '858778', '858876', '858898', '858939', '858953', '858967', '858991', '859003', '859027', '859097', '859137', '859146', '859156', '859162', '859220', '859247', '859315', '859327', '859347', '859366', '859383', '859939', '860151', '860426', '860579', '860593', '992656', '992668', '1313294', '1356835', '1357940', '1358753', '1366873', '1372265', '1535979', '1595730', '1595740', '1595746', '1651558', '1244754', '1248040', '1294382', '1294383', '899125', '1087459', '857512', '1294380', '1087389', '1087427', '1087463', '857510', '857512', '1087459', '897655', '897658', '897698', '897704', '897712', '897747', '897755', '1724354', '1724356', '1724358', '1724359', '902733', '902738', '902743', '1306900', '1247421', '1012656', '1012666', '1012667', '1012678', '1012679', '1014218', '897653', '897657', '897677', '897687', '897696', '897702', '897710', '897730', '897737', '897745', '897749', '897753', '897756', '897757', '897758', '897771', '898004', '898138', '898139', '898612', '898624', '902729', '902736', '902741', '1306898', '1433251', '1724276', '1724338', '1724340', '1724341', '1724383', '1724644', '1233700', '1247434', '1724352', '197873', '311300', '978005', '978009', '978013', '1250693', '978000', '978012', '978023', '1426827', '1437500', '1440303', '977986', '977998', '978001', '978003', '978006', '978010', '1432291', '1250685', '861517', '861520', '861522', '861525', '861529', '861617', '1665687', '1665691', '1665698', '1665700', '1665702', '1242106', '1242503', '860792', '861447', '861455', '861459', '861463', '861467', '861473', '861476', '861479', '861482', '861493', '861494', '861578', '1655058', '1655060', '1665685', '1665690', '1665697', '1665699', '1665701', '864708', '864720', '864737', '864980', '991149', '864706', '864714', '864718', '864751', '864761', '864769', '864794', '864828', '864978', '864984', '991147', '892496', '892556', '892598', '892645', '892658', '894803', '894805', '894816', '1303731', '1303733', '1303738', '1303742', '892473', '892489', '892560', '892574', '892648', '892652', '892660', '894813', '1731999', '1086310', '892299', '892344', '892351', '892357', '1190284', '863847', '863849', '863851', '863853', '863855', '863857', '1728784', '1728792', '1728801', '1728806', '1745881', '1745886', '1745889', '1745892', '894986', '894942', '894970', '895248', '894918', '863845', '863848', '863850', '863852', '863854', '863856', '891874', '891878', '891881', '891883', '891885', '891888', '891890', '891893', '892297', '892342', '892345', '892349', '892352', '892355', '892494', '892516', '892531', '892554', '892579', '892582', '892589', '892596', '892603', '892625', '892643', '892646', '892669', '892672', '892678', '894780', '894801', '894807', '894814', '894911', '894912', '894914', '894926', '894930', '894933', '894938', '894941', '894969', '894971', '895014', '895016', '895022', '895185', '895194', '895199', '895201', '895202', '895206', '895208', '895213', '895215', '895217', '895219', '895221', '895227', '895233', '895238', '895240', '895247', '895861', '895867', '895869', '895871', '998212', '998213', '1303729', '1303736', '1303740', '1442790', '1728783', '1728789', '1728791', '1728800', '1728805', '1728999', '1729197', '1731517', '1731520', '1731522', '1731530', '1731537', '1731545', '1731993', '1731995', '1731998', '1732003', '1732006', '1732011', '1732014', '1732136', '1732138', '1733080', '1190785', '1232113', '1806707', '1113313', '1113316', '1049216', '1049223', '1049227', '1049235', '1049504', '1049545', '1049565', '1049576', '1049582', '1049586', '1049595', '1049601', '1049613', '1049620', '1049623', '1050409', '1050490', '1487288', '1049625', '1049637', '1049640', '1049642', '1049647', '1049650', '1049655', '848772', '848928', '1491834', '1537116', '1537120', '1537122', '1546089', '1664448', '1664634', '1790533', '1791560', '1791569', '1791576', '1791582', '1860127', '1860129', '1860137', '1860148', '1860151', '1860154', '1860157', '1806701', '1806710', '1806716', '1806722', '1806728', '1806734', '1014599', '1014615', '1014632', '1037259', '1049214', '1049221', '1049225', '1049233', '1049251', '1049257', '1049260', '1049267', '1049270', '1049502', '1049543', '1049557', '1049563', '1049574', '1049580', '1049584', '1049589', '1049593', '1049599', '1049604', '1049611', '1049615', '1049618', '1049621', '1049635', '1049651', '1049658', '1049683', '1049686', '1049691', '1049696', '1049703', '1049709', '1049717', '1049719', '1049720', '1049721', '1049727', '1113314', '1491832', '1545903', '1545907', '1545910', '637540', '724614', '848768', '1790527', '1791558', '1791567', '1791574', '1791580', '977876', '977896', '977904', '977911', '977917', '977925', '977931', '977937', '977940', '977943', '977874', '977894', '977902', '977909', '977915', '977923', '977929', '977935', '977939', '977942', '977971', '977974', '200240', '849692', '827750', '827748', '827751', '828576', '828581', '828585', '828594', '849279', '849293', '849295', '849303', '849304', '849306', '849455', '1729581', '1729586', '1729712', '1729578', '1729584', '1729710', '1809097', '1809102', '1809104', '854140', '854142', '854144', '1356319', '1149367', '1149370', '1149373', '1149376', '1149378', '825409', '825411', '825413', '1148797', '1148809', '1356315', '1148800', '1148803', '1148807', '835605', '845314', '845315', '845316', '836397', '833710', '833712', '833714', '1148482', '1148487', '1148491', '833709', '833711', '833713', '835603', '836395', '836408', '836466', '836485', '849329', '849331', '849563', '849564', '849903', '999729', '1148478', '1148485', '1148489', '1248115', '1653607']\\n    regimenList = inputs[\\\"rxcui\\\"].split(\\\" \\\")\\n\\n    opioid = False\\n\\n    for drug in regimenList:\\n        if drug in opioidList:\\n            opioid = True\\n            break\\n        else:\\n            continue\\n    return \\\"Opioid? \\\" + str(opioid)\\n\\n# Test function to check code\\ndef test():\\n    if execute({\\\"rxcui\\\":\\\"1723222 2101 10767\\\"}) != \\\"Opioid? True\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"rxcui\\\":\\\"687023 1723210 730794\\\"}) != \\\"Opioid? True\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"rxcui\\\":\\\"830861 1099870\\\"}) != \\\"Opioid? False\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"rxcui\\\":\\\"994847 2101 994048\\\"}) != \\\"Opioid? True\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"rxcui\\\":\\\"\\\"}) != \\\"Opioid? False\\\":\\n        return \\\"error.\\\"\\n    if execute({\\\"rxcui\\\":\\\"1098906\\\"}) != \\\"Opioid? True\\\":\\n        return \\\"error.\\\"\\n    return \\\"ok.\\\"\\n\",\n    \"engineType\": \"Python\",\n    \"functionName\": \"execute\"\n  },\n  \"url\": \"http://dlhs-fedora-dev-a.umms.med.umich.edu:8080/ObjectTeller/knowledgeObject/ark:/99999/fk4vx0mr08\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Post Respiratory Depression Indicator",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Body matches string\"] = responseBody.has(\"Opioid? True Benzodiazepine? True Muscle Relaxant? True\");"
						]
					}
				}
			],
			"request": {
				"url": "{{baseUrl}}/knowledgeObject/ark:/67034/k43k5p/result",
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"rxcui\":\"480 2101 10767\"}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Post Medication Regimen Complexity Index (MRCI) Calculator",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Body matches string\"] = responseBody.has(\"MRCI Score = 13\");"
						]
					}
				}
			],
			"request": {
				"url": "{{baseUrl}}/knowledgeObject/ark:/67034/k4zw2d/result",
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"drugList\":\n\t{\"lisinopril 40 mg tablet\":{\"route\":\"oral\",\"form\":\"capsules/tablets\",\"dosingFrequency\":\"twice daily\",\"additionalDirections\":\"\"},\n\t\"metroprolol tartrate 100 mg tablet\":{\"route\":\"oral\",\"form\":\"capsules/tablets\", \"dosingFrequency\":\"twice daily\",\"additionalDirections\":\"break or crush tablet\"},\n\t\"amLODIPine 10 mg tablet\":{\"route\":\"oral\",\"form\":\"capsules/tablets\",\"dosingFrequency\":\"once daily\",\"additionalDirections\":\"\"},\n\t\"levothyroxine 75 mcg capsule\":{\"route\":\"oral\",\"form\":\"capsules/tablets\",\"dosingFrequency\":\"once daily\",\"additionalDirections\":\"alternating dose\"}\n\t}\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Post Morphine Milligram Equivalents (MME) Calculator",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Body matches string\"] = responseBody.has(\"Morphine Milligram Equivalents total = 8.0\");"
						]
					}
				}
			],
			"request": {
				"url": "{{baseUrl}}/knowledgeObject/ark:/99999/fk4c25559n/result",
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"opiodPrescriptions\":{\"hydromorphone\":{\"dosage\":1.0,\"dosingFrequency\":\"q 12h\"}}}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Post New Opioid Start Detector",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Body matches string\"] = responseBody.has(\"not prescribed an opioid\");"
						]
					}
				}
			],
			"request": {
				"url": "{{baseUrl}}/knowledgeObject/ark:/99999/fk43b69v25/result",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"visitA\":{\"date\":\"2/4/20\",\"rxcui\":\"70\"},\"visitB\":{\"date\":\"2013/3/31\",\"rxcui\":\"790\"}}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Post Opioid User Detector",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Body matches string\"] = responseBody.has(\"Opioid? True\");"
						]
					}
				}
			],
			"request": {
				"url": "{{baseUrl}}/knowledgeObject/ark:/99999/fk4vx0mr08/result",
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"rxcui\":\"1723222 2101 10767\"}"
				},
				"description": ""
			},
			"response": []
		}
	]
}