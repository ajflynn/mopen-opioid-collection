#!/bin/bash          
echo "Adding Transition of Care Objects"

curl -X PUT -H "Content-Type: application/json" -H "Cache-Control: no-cache" -H "Postman-Token: 7442436c-8a70-bd5e-a431-b2178c76220d" -d '{
  "inputMessage": "<rdf:RDF xmlns:ot=\"http://uofm.org/objectteller/#\"\n         xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n    <rdf:Description rdf:about=\"http://uofm.org/objectteller/inputMessage\">\n        <ot:noofparams>2</ot:noofparams>\n        <ot:params>\n            <rdf:Seq>\n                <rdf:li>visitA</rdf:li>\n                <rdf:li>visitB</rdf:li>\n            </rdf:Seq>\n        </ot:params>\n    </rdf:Description>\n    <rdf:Description rdf:about=\"http://uofm.org/objectteller/age/\">\n        <ot:datatype>MAP</ot:datatype>\n    </rdf:Description>\n    <rdf:Description rdf:about=\"http://uofm.org/objectteller/gender/\">\n        <ot:datatype>MAP</ot:datatype>\n    </rdf:Description>\n</rdf:RDF>\n",
  "outputMessage": "<rdf:RDF xmlns:ot=\"http://uofm.org/objectteller/\"\n  xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n  <rdf:Description rdf:about=\"http://uofm.org/objectteller/outputMessage\">\n    <ot:returntype>STRING</ot:returntype>\n  </rdf:Description>\n</rdf:RDF>\n",
  "payload": {
    "content": "# New Opioid Start Detector\n# February 10, 2017\n# takes in two visit summaries (e.g. admit and discharge summary), and identifies if the patient is a new opioid starter\nfrom datetime import datetime\n\ndef execute(inputs):\n    visit_A = inputs[\"visitA\"]\n    visit_B = inputs[\"visitB\"]\n\n\n    opioidCheck = {}\n    # get rx from visit a, and check if it is an opioid\n    rxcui = visit_A[\"rxcui\"]\n    if rxcui == \"\":\n        return \"rxcui not provided\"\n    opioidCheck[\"visit_A\"] = opioidDetector(rxcui)\n\n    # get rx from visit b, and check if it is an opioid. If it is in opioid, opioid detector returns 1\n    rxcui = visit_B[\"rxcui\"]\n    if rxcui == \"\":\n        return \"rxCUI not provided\"\n    opioidCheck[\"visit_B\"] = opioidDetector(rxcui)\n\n    # compare dates a and dates b to see which visit was first\n    date1 = visit_A[\"date\"]\n    date2 = visit_B[\"date\"]\n    if date1 == \"\" or date2 == \"\":\n        return \"date information not provided\"\n\n\n    minDate = dateComparison(date1,date2)\n\n    # compare dates and opioid rx results, and return if the patient is a new opioid starter or not\n    return visitComparison(minDate,opioidCheck)\n\n\n\n\n# checks if the rx is an opioid, if yes: return 1, if no: return 0\ndef opioidDetector(rxcui):\n    # hard coded\n    opioidList=[\"480\",\"2670\",\"235412\",\"23088\",\"4337\",\"5489\",\"221107\",\"314667\",\"3423\",\"6378\",\"6468\",\"6754\",\"6813\",\"7052\",\"7804\",\"7814\",\"32926\",\"8785\",\"73032\",\"56795\",\"787390\",\"10689\"]\n    if rxcui in opioidList:\n        return 1\n    else:\n        return 0\n\n\n\n\n\n# compares the dates of the visits and returns the date that happened first\ndef dateComparison(date1,date2):\n    #  year, month, day\n\n    date1_split = date1.split(\"/\")\n    date1_datetime = datetime((int(date1_split[0])),(int(date1_split[1])),(int(date1_split[2])))\n\n    date2_split= date2.split(\"/\")\n    date2_datetime = datetime((int(date2_split[0])),(int(date2_split[1])),(int(date2_split[2])))\n\n    dates = [date1_datetime,date2_datetime]\n    minDate = min(dates)\n    if minDate == date1_datetime:\n        return \"visit_A\"\n    if minDate == date2_datetime:\n        return \"visit_B\"\n\n\n\n\n# if the last visit rx was an opiod, and the first visit rx was not, this patient is a new opiod starter\ndef visitComparison(minDate,opioidCheck):\n    if minDate == \"visit_A\":\n        if (opioidCheck[minDate] == 0) and (opioidCheck[\"visit_B\"] == 1):\n            return \"new opioid starter\"\n        elif (opioidCheck[minDate] == 1):\n            return \"previously prescribed opioid\"\n\n    if minDate == \"visit_B\":\n        if (opioidCheck[minDate] == 0) and (opioidCheck[\"visit_A\"] == 1):\n            return \"new opioid starter\"\n        elif (opioidCheck[minDate] == 1):\n            return \"previously prescribed opioid\"\n\n    if (opioidCheck[\"visit_B\"] == 0) and (opioidCheck[\"visit_A\"] == 0):\n        return \"not prescribed an opioid\"\n\n    return \"cannot calculate\"\n\n\n\ndef test():\n    if execute({\"visitA\":{\"date\":\"2013/4/20\",\"rxcui\":\"2670\"},\"visitB\":{\"date\":\"2013/3/31\",\"rxcui\":\"10\"}}) != \"new opioid starter\":\n        return \"error.\"\n    if execute({\"visitA\":{\"date\":\"2013/4/20\",\"rxcui\":\"70\"},\"visitB\":{\"date\":\"2013/3/31\",\"rxcui\":\"10\"}}) != \"not prescribed an opioid\":\n        return \"error.\"\n    if execute({\"visitA\":{\"date\":\"2013/4/20\",\"rxcui\":\"70\"},\"visitB\":{\"date\":\"2013/3/31\",\"rxcui\":\"2670\"}}) != \"previously prescribed opioid\":\n        return \"error.\"\n    if execute({\"visitA\":{\"date\":\"\",\"rxcui\":\"70\"},\"visitB\":{\"date\":\"\",\"rxcui\":\"2670\"}}) != \"date information not provided\":\n        return \"error.\"\n    if execute({\"visitA\":{\"date\":\"2013/4/20\",\"rxcui\":\"70\"},\"visitB\":{\"date\":\"2013/3/31\",\"rxcui\":\"\"}}) != \"rxCUI not provided\":\n        return \"error.\"\n    return \"ok.\"\n",
    "engineType": "Python",
    "functionName": "execute"
  },
  "url": "http://dlhs-fedora-dev-a.umms.med.umich.edu:8080/ObjectTeller/knowledgeObject/ark:/99999/fk43b69v25"
}' "http://localhost:8080/shelf/ark:/99999/fk43b69v25"

echo ""
echo "Transition of Care Objects added"
